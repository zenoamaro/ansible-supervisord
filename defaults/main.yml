---

# See the documentation for help in configuring Supervisor.
# [docs] http://supervisord.org/configuration.html


# Daemon
# ------

# The identifier string for this supervisor process, used by the RPC interface.
supervisord_identifier: supervisor
supervisord_service_name: "{{supervisord_identifier}}"

supervisord_bin_dir:     /usr/bin
supervisord_conf_dir:    /etc/supervisor
supervisord_runtime_dir: /var/run

supervisord_conf_file: "{{supervisord_conf_dir}}/supervisord.conf"
supervisord_conf_file_link: "/etc/supervisord.conf"  # FIXME: This is too hardcoded
supervisord_additional_conf_dir: "{{supervisord_conf_dir}}/conf.d"

supervisord_init_script: "/etc/init.d/{{supervisord_service_name}}"
supervisord_daemon: "{{supervisord_bin_dir}}/supervisord"
supervisord_supervisorctl: "{{supervisord_bin_dir}}/supervisorctl"

# Sleep time between restarts to catch slowpoke processes.
supervisord_restart_delay_time: 5

# If true, supervisord will start daemonized.
supervisord_daemonize: yes

# The location in which supervisord keeps its pid file. This option can include
# the value %(here)s, which expands to the directory in which the supervisord
# configuration file was found, or shell `$variables`.
supervisord_pid_file: "{{supervisord_runtime_dir}}/supervisord.pid"

# The umask of the supervisord process.
supervisord_umask: '022'

# A list of key/value pairs in the form KEY="val",KEY2="val2" that will be
# placed in the supervisord process’ environment (and as a result in all of its
# child process’ environments). This option can include the value %(here)s,
# which expands to the directory in which the supervisord configuration file was
# found. Note that subprocesses will inherit the environment variables of the
# shell used to start supervisord except for the ones overridden here and within
# the program’s environment option. See Subprocess Environment.
supervisord_environment: {}

# If supervisord is run as the root user, switch users to this UNIX user account
# before doing any meaningful processing. This value has no effect if
# supervisord is not run as root.
supervisord_user:

# When supervisord daemonizes, switch to this directory. This option can include
# the value %(here)s, which expands to the directory in which the supervisord
# configuration file was found.
supervisord_pwd:


# Unix socket server
# ------------------

supervisord_socket_server: on

# A path to a UNIX domain socket (e.g. `/tmp/supervisord.sock`) on which
# supervisor will listen for HTTP/XML-RPC requests. supervisorctl uses XML-RPC
# to communicate with supervisord over this port. This option can include the
# value `%(here)s`, which expands to the directory in which the supervisord
# configuration file was found, or shell `$variables`.
supervisord_socket_file:  "{{supervisord_runtime_dir}}/supervisor.sock"

supervisord_socket_chmod: '0700'
supervisord_socket_chown: # Defaults to the `user:group` who started it

# Specifies the authentication details required to connect to this server. The
# password can be cleartext, or can be specified as a SHA-1 hash if prefixed by
# the string {SHA}. For example, {SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d
# is the SHA-stored version of the password “thepassword”. Note that hashed
# password must be in hex format.
supervisord_socket_authenticated: no
supervisord_socket_username:
supervisord_socket_password:


# HTTP server
# -----------

supervisord_inet_server: off

# Host:port values or (e.g. 127.0.0.1 and 9001) on which supervisor will listen
# for HTTP/XML-RPC requests. Supervisorctl will use XML-RPC to communicate with
# supervisord over this port. To listen on all interfaces in the machine,
# specify an empty address or use '*'.
supervisord_inet_address: 127.0.0.1
supervisord_inet_port: 9001

# Specifies the authentication details required to connect to this server. The
# password can be cleartext, or can be specified as a SHA-1 hash if prefixed by
# the string {SHA}. For example, {SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d
# is the SHA-stored version of the password “thepassword”. Note that hashed
# password must be in hex format.
supervisord_inet_authenticated: no
supervisord_inet_username:
supervisord_inet_password:


# Interfaces
# ----------

supervisord_rpc_interfaces: {}


# Controller
# ----------

# The URL that should be used to access the supervisord server, e.g.
# http://localhost:9001. For UNIX domain sockets, use
# unix:///absolute/path/to/file.sock.
supervisorctl_server_url: "unix://{{supervisord_socket_file}}"

# Specifies the authentication details required to connect to the server. The
# password should be the cleartext version of password from the supervisord
# server configuration for the port or UNIX domain socket you’re attempting to
# access. This value cannot be passed as a SHA hash. Unlike other passwords
# specified in this file, it must be provided in cleartext.
supervisorctl_username:
supervisorctl_password:

# String used as supervisorctl prompt.
supervisorctl_prompt: "{{supervisord_identifier}}"

# A path to use as the readline persistent history file. If you enable this
# feature by choosing a path, your supervisorctl commands will be kept in the
# file, and you can use readline (e.g. arrow-up) to invoke commands you
# performed in your last supervisorctl session.
supervisorctl_history_file:


# Logging
# -------

supervisord_logs_dir: /var/log/supervisor

# The path to the activity log of the supervisord process. This option can
# include the value %(here)s, which expands to the directory in which the
# supervisord configuration file was found.
supervisord_log_file: "{{supervisord_logs_dir}}/supervisord.log"

# The logging level, dictating what is written to the supervisord activity log.
# One of critical, error, warn, info, debug, trace, or blather. Note that at log
# level debug, the supervisord log file will record the stderr/stdout output of
# its child processes and extended info info about process state changes, which
# is useful for debugging a process which isn’t starting properly. See also:
# Activity Log Levels.
supervisord_log_level: info

# The maximum number of bytes that may be consumed by the activity log file
# before it is rotated (suffix multipliers like “KB”, “MB”, and “GB” can be used
# in the value). Set this value to 0 to indicate an unlimited log size.
supervisord_log_file_size: 5MB

# The number of backups to keep around resulting from activity log file
# rotation. If set to 0, no backups will be kept.
supervisord_log_file_backups: 5

# The directory used for AUTO child log files. This option can include the value
# %(here)s, which expands to the directory in which the supervisord
# configuration file was found.
supervisord_child_logs_dir: "{{supervisord_logs_dir}}"

# Strip all ANSI escape sequences from child log files.
supervisord_strip_ansi_from_child_logs: no


# Tuning and debugging
# --------------------

# Prevent supervisord from clearing any existing AUTO chlild log files at
# startup time. Useful for debugging.
supervisord_no_cleanup: no

# The minimum number of file descriptors that must be available before
# supervisord will start successfully. A call to setrlimit will be made to
# attempt to raise the soft and hard limits of the supervisord process to
# satisfy minfds. The hard limit may only be raised if supervisord is run as
# root. supervisord uses file descriptors liberally, and will enter a failure
# mode when one cannot be obtained from the OS, so it’s useful to be able to
# specify a minimum value to ensure it doesn’t run out of them during execution.
# This option is particularly useful on Solaris, which has a low per-process fd
# limit by default.
supervisord_min_fds: 1024

# The minimum number of process descriptors that must be available before
# supervisord will start successfully. A call to setrlimit will be made to
# attempt to raise the soft and hard limits of the supervisord process to
# satisfy minprocs. The hard limit may only be raised if supervisord is run as
# root. supervisord will enter a failure mode when the OS runs out of process
# descriptors, so it’s useful to ensure that enough process descriptors are
# available upon supervisord startup.
supervisord_min_procs: 200


# Include
# -------

# A list of file globs. Each file glob may be absolute or relative. If the file
# glob is relative, it is considered relative to the location of the
# configuration file which includes it. A “glob” is a file pattern which matches
# a specified pattern according to the rules used by the Unix shell. No tilde
# expansion is done, but *, ?, and character ranges expressed with [] will be
# correctly matched. Recursive includes from included files are not supported.
supervisord_additional_conf_files:
  - "{{supervisord_additional_conf_dir}}/*.conf"

# List of supervisor programs, examples:
#    supervisor_tasks:
#        - name: google
#          command: ping google.com
#          autostart: true
#          autorestart: false
supervisord_tasks: []

# List of supervisor event - similar to tasks/programs but for eventlisteners like crashmail, examples:
#    supervisor_events:
#        - name: crashmail
#          command: crashmail -p program -m alerts@example.com
#          events: PROCESS_STATE_EXITED
supervisord_events: []

# List of groups tasks, examples:
#   supervisor_groups:
#        - name: test_group
#          programs: google
supervisord_groups: []

# Install superlance (http://superlance.readthedocs.org)
supervisord_superlance: no

supervisord_superlance_pip: /usr/local/bin/pip2